// import { conexao } from './conexao.js';

// export const livrosCadastrados = async () => {
//     const [criarTabela] = await conexao.execute(
//         ` create table if not exists livros (
//             id int primary key auto_increment,
//             titulo varchar(150) not null,
//             autor varchar(150) not null,
//             ano date not null,
//             genero varchar(80) not null,
//             quantidade_estoque int not null
//         )`
//     )
//     const [tabela] = await conexao.execute(
//         'select * from livros'
//     )
//     return tabela
// }

// export const listarLivros = async(livros) => {

// }

let num = 1.12
console.log(parseInt(num))

// üí° Desafio: Sistema de Gerenciamento de Livros (Back-End com Express + MySQL)


// ---

// üìå Requisitos principais:

// 1. Banco de Dados: -> feito

// 2. Endpoints obrigat√≥rios (Express):

// GET /livros: lista todos os livros ou filtra por t√≠tulo, autor, ano ou g√™nero (usando query params).

// GET /livros/:id: mostra os dados de um √∫nico livro.

// POST /livros: cadastra um novo livro.

// PUT /livros/:id: atualiza qualquer informa√ß√£o de um livro.

// DELETE /livros/:id: remove o livro do sistema.



// 3. Extras para n√≠vel hard (opcional):

// Adicione um campo dispon√≠vel e altere automaticamente para false se quantidade_estoque for 0.

// Fa√ßa valida√ß√µes no cadastro (campos obrigat√≥rios, ano num√©rico, etc).

// Ordena√ß√£o por ano ou t√≠tulo (?ordenar=ano ou ?ordenar=titulo).